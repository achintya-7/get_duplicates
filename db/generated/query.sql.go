// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package db

import (
	"context"
)

const getProfilesCount = `-- name: GetProfilesCount :one
SELECT 
    COUNT(*) AS count
FROM
    profiles
`

func (q *Queries) GetProfilesCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getProfilesCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getProfilesFoldersCatalogs = `-- name: GetProfilesFoldersCatalogs :many
SELECT 
    profiles.user_id, 
    profiles.key AS profile_key, 
    folders.key AS folder_key, 
    catalogs.key AS catalog_key
FROM 
    profiles
INNER JOIN 
    folders ON profiles.key = folders.profile_key
INNER JOIN 
    catalogs ON folders.key = catalogs.folder_key
WHERE 
    profiles.user_id = $1
`

type GetProfilesFoldersCatalogsRow struct {
	UserID     string `json:"user_id"`
	ProfileKey string `json:"profile_key"`
	FolderKey  string `json:"folder_key"`
	CatalogKey string `json:"catalog_key"`
}

func (q *Queries) GetProfilesFoldersCatalogs(ctx context.Context, userID string) ([]GetProfilesFoldersCatalogsRow, error) {
	rows, err := q.db.Query(ctx, getProfilesFoldersCatalogs, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetProfilesFoldersCatalogsRow{}
	for rows.Next() {
		var i GetProfilesFoldersCatalogsRow
		if err := rows.Scan(
			&i.UserID,
			&i.ProfileKey,
			&i.FolderKey,
			&i.CatalogKey,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProfilesWithOffset = `-- name: GetProfilesWithOffset :many
SELECT 
    user_id 
FROM
    profiles
LIMIT $1 OFFSET $2
`

type GetProfilesWithOffsetParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetProfilesWithOffset(ctx context.Context, arg GetProfilesWithOffsetParams) ([]string, error) {
	rows, err := q.db.Query(ctx, getProfilesWithOffset, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var user_id string
		if err := rows.Scan(&user_id); err != nil {
			return nil, err
		}
		items = append(items, user_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
